[project
version = "3.0.0"
name = "Agents-eval"
description = "Assess the effectiveness of agentic AI systems across various use cases focusing on agnostic metrics that measure core agentic capabilities."
authors = [
    {name = "qte77", email = "qte@77.gh"}
]
readme = "README.md"
requires-python = "==3.13.*"
license = "bsd-3-clause"
dependencies = [
    "agentops>=0.4.14",
    "datasets>=4.0.0",
    "google-genai>=1.26.0",
    "httpx>=0.28.1",
    "logfire>=3.16.1",
    "loguru>=0.7.3",
    "markitdown[pdf]>=0.1.2",
    "pydantic>=2.10.6",
    # "pydantic-ai>=0.0.36",
    "pydantic-ai-slim[duckduckgo,openai,tavily]>=0.2.12",
    "pydantic-settings>=2.9.1",
    "scalene>=1.5.51",
    "weave>=0.51.49",
]

[project.urls]
Documentation = "https://qte77.github.io/Agents-eval/"

[dependency-groups]
dev = [
    "pyright>=1.1.403",
    "ruff>=0.11.12",
]
gui = [
    "streamlit>=1.43.1",
]
test = [
    "pytest>=8.3.4",
    "pytest-cov>=6.0.0",
    "pytest-asyncio>=0.25.3",
    "pytest-bdd>=8.1.0",
    "reportlab>=4.4.0",  # for PDF generation
    "requests>=2.32.3",
    "ruff>=0.9.2",
]
docs = [
    "griffe>=1.5.1",
    "mkdocs>=1.6.1",
    "mkdocs-awesome-pages-plugin>=2.9.3",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-literate-nav>=0.6.1",
    "mkdocs-material>=9.5.44",
    "mkdocs-section-index>=0.3.8",
    "mkdocstrings[python]>=0.27.0",
]

[tool.uv]
# package = true
# last well-known "2025-05-31T00:00:00Z"
exclude-newer = "2025-07-20T00:00:00Z"

[tool.logfire]
ignore_no_config=true
send_to_logfire="if-token-present"

[tool.pyright]
include = ["src/app"]
extraPaths = ["./venv/lib/python3.13/site-packages"]
useLibraryCodeForTypes = true
pythonVersion = "3.13"
typeCheckingMode = "strict"
reportMissingTypeStubs = "none"
reportUnknownMemberType = "none"
reportUnknownVariableType = "none"

[tool.ruff]
target-version = "py313"
src = ["src", "tests"]

[tool.ruff.format]
docstring-code-format = true

[tool.ruff.lint]
# ignore = ["E203"]  # Whitespace before ':'
unfixable = ["B"]
select = [
    # pycodestyle
    "E",
    # Pyflakes
    "F",
    # pyupgrade
    "UP",
    # isort
    "I",
]

[tool.ruff.lint.isort]
known-first-party = ["src", "tests"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pytest.ini_options]
addopts = "--strict-markers"
# "function", "class", "module", "package", "session"
asyncio_default_fixture_loop_scope = "function"
pythonpath = ["src"]
testpaths = ["tests"]

[tool.coverage]
[tool.coverage.run]
include = [
    "tests/**/*.py",
]
# omit = []
# branch = true

[tool.coverage.report]
show_missing = true
exclude_lines = [
    # 'pragma: no cover',
    'raise AssertionError',
    'raise NotImplementedError',
]
omit = [
    'env/*',
    'venv/*',
    '.venv/*',
    '*/virtualenv/*',
    '*/virtualenvs/*',
    '*/tests/*',
]

[tool.bumpversion]
current_version = "3.0.0"
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)"
serialize = ["{major}.{minor}.{patch}"]
commit = true
tag = true
allow_dirty = false
ignore_missing_version = false
sign_tags = false
tag_name = "v{new_version}"
tag_message = "Bump version: {current_version} → {new_version}"
message = "Bump version: {current_version} → {new_version}"
commit_args = ""

[[tool.bumpversion.files]]
filename = "pyproject.toml"
search = 'version = "{current_version}"'
replace = 'version = "{new_version}"'

[[tool.bumpversion.files]]
filename = "src/app/__init__.py"
search = '__version__ = "{current_version}"'
replace = '__version__ = "{new_version}"'

[[tool.bumpversion.files]]
filename = "README.md"
search = "version-{current_version}-58f4c2"
replace = "version-{new_version}-58f4c2"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = """
## [Unreleased]
"""
replace = """
## [Unreleased]

## [{new_version}] - {now:%Y-%m-%d}
"""
