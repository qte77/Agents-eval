@startuml
!theme plain

!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

Person(user, "User", "Runs the platform via CLI, Streamlit, or CI workflows")

System_Boundary(external_providers, "External Providers") {
    System_Ext(llm_providers, "LLM Providers", "Anthropic, Gemini, Ollama, OpenRouter, HuggingFace, etc.")
    System_Ext(tools, "Tools/Search APIs", "DuckDuckGo, Tavily, etc.")
    System_Ext(obs, "Observability", "WandB, Logfire, AgentOps")
}

System_Boundary(agents_eval, "Agents-eval Platform") {

    ' ------ Software System Containers ------
    Container(main_app, "Main Application", "Python", "CLI+GUI entrypoint, orchestrates agents/sessions")
    Container(agent_system, "Agent System", "Python/PydanticAI", "Multi-agent orchestration (Manager/Researcher/Analyst/Synthesizer)")
    Container(datasets, "Datasets", "Python+JSON", "Loads, validates, and exposes benchmark datasets (e.g., PeerRead)")
    Container(metrics, "Evaluation Metrics", "Python", "Implements and scores agent behavior against configurable metrics")
    Container(config, "Configuration", "JSON/Pydantic", "Provider, model, prompts, eval weights, dataset config")

    ' ------ Key Data Flows ------
    Rel(user, main_app, "Submits tasks, views results, provides feedback", "CLI/Streamlit")
    Rel(main_app, agent_system, "Initiates, monitors agent tasks", "PydanticAI")
    Rel(config, main_app, "Provides runtime settings", "JSON")
    Rel(datasets, agent_system, "Provides benchmark tasks/data")
    Rel(metrics, agent_system, "Provides metrics calculation")
    Rel(agent_system, llm_providers, "Queries", "chat/completion")
    Rel(agent_system, tools, "Queries", "API")
    Rel(agent_system, obs, "Sends", "logger, introspection")
}

SHOW_LEGEND()

@enduml
